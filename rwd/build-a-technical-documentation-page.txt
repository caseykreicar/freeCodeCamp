** start of undefined **

<!DOCTYPE html>
<html lang="eng">
  <head>
    <title>Documentation Page</title>
    <link rel="stylesheet" href="styles.css">
  </head>
  <body>
    <main id="main-doc">
      <nav id="navbar">
        <header>Navigation Bar</header>
        <table>
        <tr>
          <td><a class="nav-link" href="#intro">intro</a></td>
          </tr>
          <tr>
        <td><a class="nav-link" href="#js">js</a></td>
        </tr>
        <tr>
        <td><a class="nav-link" href="#var">var</a></td>
        </tr>
        <tr>
        <td><a class="nav-link" href="#varScope">varScope</a></td>
        </tr>
        <tr>
        <td><a class="nav-link" href="#dataTypes">dataTypes</a></td>
        </tr>
        </table>
      </nav>
      <section class="main-section" id="intro">
        <header>intro</header>
        <p>JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.
</p>
      </section>
      <section class="main-section" id="js">
        <header>js</header>
        <p>JavaScript and Java are similar in some ways but fundamentally different in some others. The JavaScript language resembles Java but does not have Java's static typing and strong type checking. JavaScript follows most Java expression syntax, naming conventions and basic control-flow constructs which was the reason why it was renamed from LiveScript to JavaScript.</p>
        <p>JavaScript is a very free-form language compared to Java. You do not have to declare all variables, classes, and methods. You do not have to be concerned with whether methods are public, private, or protected, and you do not have to implement interfaces. Variables, parameters, and function return types are not explicitly typed.</p>
      </section>
      <section class="main-section" id="var">
        <header>var</header>
        <p>You use variables as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules.</p>
        <p>A JavaScript identifier must start with a letter, underscore (_), or dollar sign ($); subsequent characters can also be digits (0-9). Because JavaScript is case sensitive, letters include the characters "A" through "Z" (uppercase) and the characters "a" through "z" (lowercase).</p>   
        <p>Declaring variables (there are three ways to do so):</p>
        <code>var x = 42.</code>
        <code>x = 42.</code>
        <code>let y = 13.</code>
      </section>
      <section class="main-section" id="varScope">
        <header>varScope</header>
        <p>When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function.</p>
        <p>JavaScript before ECMAScript 2015 does not have block statement scope; rather, a variable declared within a block is local to the function (or global scope) that the block resides within. For example the following code will log 5, because the scope of x is the function (or global context) within which x is declared, not the block, which in this case is an if statement.</p>
        <code>if (true) { var x = 5; } console.log(x); // 5</code>
        <p>This behavior changes, when using the let declaration introduced in ECMAScript 2015.</p>
        <code>if (true) { let y = 5; } console.log(y); // ReferenceError: y is
not defined</code>
        <p>Scope determines the accessibility (visibility) of variables.
</p>
<p>JavaScript has 3 types of scope:
<ul>
<li>Block scope</li>
<li>Function scope</li>
<li>Global scope</li>
</p>
      </section>
      <section class="main-section" id="dataTypes">
        <header>dataTypes</header>
        <p>The latest ECMAScript standard defines <b>seven</b> data types:</p>
        <p>Six data types that are primitives:</p>
        <ul>
          <li>Boolean. true and false.</li>
          <li>null. A special keyword denoting a null value. Because JavaScript is case-sensitive, null is not the same as Null, NULL, or any other variant.</li>
          <li>undefined. A top-level property whose value is undefined.</li>
          <li>Number. 42 or 3.14159.
</li>
          <li>String. "Howdy"</li>
          <li>Symbol (new in ECMAScript 2015). A data type whose instances are unique and immutable.</li>
          <li id="object">and Object</li>
      </section>
    </main>
  </body>
</html>

** end of undefined **

** start of undefined **

#object {
  list-style-type: circle;
  list-style-position: inside;
  margin: 18px;
}

code {
  background-color: rgb(210,210,210);
  margin: 18px;
}

header {
  font-size: 32px;
  font-weight: 600;
}

#navbar {
  position: fixed;
  min-width: 160px;
  top: 0px;
  left: 0px;
  width: 150px;

}

nav {
  display: block;
  border: 6px solid red;
}

#main-doc {
  position: absolute;
  margin-left: 165px;
  padding: 20px;
  border: 6px solid green;
  height: auto;
  margin-top: -8px;
}

#navbar {
  height: 98.5%;
  padding: 0;
  overflow-y: auto;
  overflow-x: hidden;
}

#navbar a {
  display: block;
  text-decoration: none;
  border: 6px solid blue;
}

#navbar td:hover {
  background: lightgrey;
}

#navbar table {
    border-collapse: collapse;
}


@media screen and (min-width: 380px) {
  #navbar {width: 140px; float: left;}
  #main {margin-left: 216px;}
}

** end of undefined **

